{
    "collab_server" : "",
    "contents" : "\nlibrary(rstan)\nlibrary(RGraphics)\nlibrary(rstantools)\n\nrstan_options(auto_write = TRUE)\noptions(mc.cores = parallel::detectCores())\n\n# Part 01 ------------- Simulation of Regression Gaussian Processes ------------------------------------#\nsource(\"stan_utility.R\")\nsource(\"regression_data.R\")\n\n\n#Creating data for simulations_\nwriteLines(readLines(\"simu_gauss.stan\"))\nsimu_fit <- stan(file='simu_gauss.stan', data=simu_data, iter=1,\n                 chains=1, seed=494838, algorithm=\"Fixed_param\")\n\n#Sampling from and reserve some say 11\nf_total <- simu_data$f                                                           \ny_total <- extract(simu_fit)$yn\ntrue_realization <- data.frame(f_total, x_total)\nnames(true_realization) <- c(\"f_total\", \"x_total\")\n\nobserved_idx <- c(5*(0:99)+1)\n\nN = length(observed_idx)\nN\nx <- x_total[observed_idx]\ny <- y_total[observed_idx]\n\n\n\nplot(x_total, f_total,lwd=2, xlab=\"x\", ylab=\"y\",\n     xlim=c(-4, 4), ylim=c(-2, 2), main = \"Data for Regression : Train and Test\")\n#points(x_total, y_total, col=\"white\", pch=16, cex=0.6)\n#points(x_total, y_total, col=c_mid_teal, pch=13, cex=.8)\npoints(x, y, col=\"white\", pch=16, cex=.2)\npoints(x, y, col=\"green\", pch=16, cex=2)\nlegend(\"topleft\", legend = c(\"Training Data\", \"Testing Data\"), col = c(\"black\", \"green\"),\n       pch = c(5,5), lty = 1:2, pt.cex = 2, cex = 1.2, text.col = \"black\", horiz = F,\n       inset = c(.1,.1,.1,.1))\n\n\n#making predictions \n\nN_predict <- length(y_total)\nx_predict <- x_total\ny_predict <- y_total\n\n#Per good Stan workflow we save these simulated data in its own file.\nstan_rdump(c(\"N\", \"x\", \"y\",\n             \"N_predict\", \"x_predict\", \"y_predict\",\n             \"sample_idx\"), file=\"gp.data.R\")\n\ndata <- read_rdump(\"gp.data.R\")\n\nstan_rdump(c(\"f_total\", \"x_total\", \"sigma_true\"), file=\"gp.truth.R\")\n\n\n\n\n#nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn\n\n#load data \ndata <- read_rdump('gp.data.R')\ntrue_realization <- read_rdump('gp.truth.R')\n\nf_data <- list(sigma=true_realization$sigma_true,\n               N=length(true_realization$f_total),\n               f=true_realization$f_total)\n\nwriteLines(readLines(\"gp_prior_tune.stan\"))\nwriteLines(readLines(\"Model_Gaussian_noise.stan\"))\nwriteLines(readLines(\"Regression_model.stan\"))\nfit <- stan(file='gp_prior_tune.stan', iter=1, warmup=0, chains=1,\n            seed=5838298, algorithm=\"Fixed_param\")\nfit_model1 <- stan(file='Regression_model.stan', data=data, seed=5838298)\nfit_model2 <- stan(file='Model_Gaussian_noise.stan', data=data, seed=5838298)\n\n\n\n\n#................plot of posterior realizations....................# \nplot_posterior_realizations(fit_model1, fit_model2, data, \n                            true_realization, \"Posterior Realizations\")\nplot_posterior_realizations_single(fit_model1, fit_model2, data, \n                                   true_realization, \"Posterior Realizations\")\n\nplot_posterior_predictive(fit_model1, fit_model2, data, true_realization)\nplot_gp_realizations(fit_model1, data, true_realization,\n                     \"Posterior Realizations\")\n\n\n\n\n#part 02 ---- Simulation of Classification Gaussian Processes for Multi-label data-------------------#\n\n#simulations with R-stan \nwriteLines(readLines(\"Classification_model.stan\"))\nsource(\"classification_data.R\")\nclassification.model <- stan(file='Classification_model.stan', data=simu.data, iter=1,\n                   chains=100, seed=1234, algorithm=\"Fixed_param\")\n\n\nparams <- extract(classification.model)\np_values <- as.data.frame(params$rho1)\nlatent.values <- params$f\ntest.pred <- as.array(params$y_pred[1,])\ntrain.pred <- as.array(params$y_pred_in[1, ])\ntrain.data <- as.array(simu.data$y)\ntest.data <- as.array(simu.data$y_pred)\n\n\n\n\n#--------------- Plots of the scales parameters for the betas --------------------#\n\nplot(0,0, xlab = \"iterations 1 to 100\", ylab = \"scales values\", type = \"l\", xlim = c(1, 100), ylim = c(-.5, 10),\n     main = \"Progress of parameters\")\nlines(c(1:100), p_values[, 1], type = \"l\" ,col=\"black\", pch = 5)\nlines(c(1:100), p_values[, 2],  type = \"l\",col=\"green\", pch = 5)\nlines(c(1:100), p_values[, 3], type = \"l\", col=\"blue\", pch = 5)\nlines(c(1:100), p_values[, 4],  type = \"l\", col=\"pink\", pch = 5)\nlegend(\"topright\", legend = c(\"p1\", \"p2\", \"p3\", \"p4\"), col = c(\"black\", \"green\", \"blue\", \"pink\"),\n       pch = c(5,5,5,5), lty = 1:4, pt.cex = 2, cex = 1.2, text.col = \"black\", horiz = F,\n       inset = c(.1,.1,.1,.1))\n\n#----------------Plots of latent values for one point of training data (x1, x2)-----#\n\nplot(0,0, xlab = \"iterations 0 to 100\", ylab = \"scales values\", type = \"l\", xlim = c(0, 100), ylim = c(-100, 100),\n     main = \"Progress of latent values for single point\")\nlines(c(1:100), latent.values[, 1], type = \"l\" ,col=\"black\", pch = 5)\nlines(c(1:100), latent.values[, 2],  type = \"l\",col=\"green\", pch = 5)\nlines(c(1:100), latent.values[, 3], type = \"l\", col=\"blue\", pch = 5)\nlegend(\"topleft\", legend = c(\"Class1\", \"Class2\", \"Class3\"), col = c(\"black\", \"green\", \"blue\"),\n       pch = c(5,5,5,5), lty = 1:3, pt.cex = 2, cex = 1.2, text.col = \"black\", horiz = F,\n       inset = c(.1,.1,.1,.1))\n#----------------                               ------------------------------------#\n\n\n\n                                                                                                                                                                                                                                                                                                                                                                                        ",
    "created" : 1557828037242.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "206691020",
    "id" : "8A2E24AA",
    "lastKnownWriteTime" : 1553463857,
    "last_content_update" : 1553463857,
    "path" : "~/Pictures/Nthimbo_Tembo_Gift_Stochastic_processes_Final_Project/main_classification.R",
    "project_path" : "main_classification.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}